.\" %W% %G%
.TH TABCALC 1 "%G%"
.SH NAME
tabcalc - travel time calculator for 1d, continuous velocity models
.SH SYNOPSIS
.nf
tabcalc
.fi
.SH DESCRIPTION
This is a ancient FORTRAN code that computes travel times in 
continuous velocity models that depend only on depth. 
The velocity model is specified on an irregular grid of depth
points and an exact ray tracing computation is done using
linear gradients between the node points.   
It is a
pure flat earth algorithm.  
It takes great pains to sort out triplications and will 
accept arbitrarily complex velocity models including multiple
low-velocity zones.  
.LP
The program is a relic as parts of it were, yes believe it or not,
originally written on punch cards.  The input structure is 
still batch oriented and when you run it you will get no prompts
but the program will simply sit their waiting for you to type
input.  
The description that follows was cut from the introductory 
comments to the program describing what you need to type:
.nf

c   input - standard input file.  all input is free form.  the
c           following sequence is expected. 
c      line 1 - step  (floating point)
c               specifies depth interval that rays are to bottom in.
c               warning   exection time depends heavily on the size 
c               this parameter is set to.  experience indicates speed 
c               is optimized if step is chosen as the maximum depth 
c               in the velocity model divided by about 200 to 300.
c      line 2 - xmin  (floating point)
c               determines approximate spacing of direct rays shot
c               to supplement surface focus ray parameters determined 
c               by step.  a good choice is to set xmin=dx 
c               (dx is defined below).
c      line 3 - dx,dz  (floating point) 
c               desired spacing of table grid in distance (dx) and
c               depth (dz). 
c      line 4 - nz (integer)
c               number of depths at which travel time tables are
c               to be calculated.  (note   nz*dz can be greater than
c               the deepest velocity point specified but this is not
c               highly recommended and will produce a diagnostic.)
c      line 5 - jprt.eq.0 table not written to output file. 
c               (warning   printing the full table is not normally
c                recommended unless a problem is suspected as the 
c                output produced is usually verbose.) 
c                      .ne.0 table will be printed on output file.
.fi
.LP
Doesn't that make you nostalgic!  As the above describes the basic
algorithm is to shoot a bunch of rays that bottom at uniform depths.
The algorithm then sorts out all the reversed branches, and returns
a complete grid of travel times on a uniform grid including all
forward and reversed branches.  It uses a code to distinguish 
points on different branch segments.  
.SH FILES
.LP
The program expects one input file.  It has the frozen name 
of "vmodel".  vmodel has a fixed format (what else) as follows:
.nf

c   vmodel - formatted file containing discretized velocity model.
c            the following structure is expected. 
c      line 1 - 80 character header label 
c      line 2 - n (i5)  number of points  
c      line 3 to n+2 - velocity, depth  (2f10.5) ordered pairs
c           (warning   they must be arranged in a nondeceasing
c                      sequence in depth or chaos may result.)

.fi
.LP
It blasts some output to stdout you can mostly ignore.  It is basically
the travel times and ray parameters for the starting sequence of rays
for a surface source.   If you type something other than 0 on line
5 you will get even more junk.
.LP
There is one output file.  It also has a frozen name of "txpxall".
This is an unformatted FORTRAN binary file.  If you really want 
to know the structure, read the introductory comments to the program.
This file is passed directly to it's sibling program hypotab(1).
.SH DIAGNOSTICS
.LP
There are a bunch of warnings that you should pay attention to if you get
them.
The common ones are "large jumps" and things like that, and usually 
indicate the ray bottoming depth is too coarse. This usually means
you have tweek the "step" parameter above.    
.SH "SEE ALSO"
.nf
hypotab(1), genloc_intro(3)
.fi
.SH "BUGS AND CAVEATS"
.LP
The current version (obviously) has changed little from it's 
ancestor.  It is somewhat amazing that it still runs, but 
it has a long history of working and producing reliable 
results.  It has been used on hundreds of different velocity 
models including some of almost absurd complexity. 
I remember it fondly (?) for teaching me the importance
of rounding errors in calculations.   
The most likely problem you will run into is hard barriers
internal to the code that are relics of its past.  Remember,
when this guy was written 64 K of RAM was a barrier.  
Also, remember it is a pure flat earth algorithm, so it 
cannot be expected to compute reliable numbers for distances beyond a few
hundred km. 
.SH AUTHOR
Gary L. Pavlis
