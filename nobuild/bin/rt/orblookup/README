ABOUT THIS PACKAGE

Orblookup consists of two portions: a daemon which grabs status information
from a given orb at a specific interval, and a cgi program that generates a
web page using this information.

The orblookupd program runs an orbstat command on a single orb and stores the
resulting information locally in a parameter file.  It is controlled by a
program called orblook which starts and stops seperate instances of
orblookupd.  Multiple instances of orblook running on the same orb are not 
allowed.


The orblookupd program is also able to compare the information retrieved from
the orb with a local antelope database.  This enables the orblookup cgi to
figure out if any stations have not reported recently or if any new stations
have been picked up by the orb.

The orblookup cgi program takes an html template defined in the configuration
file and the information gathered from the orblookupd program and generates 
an html page that displays status information.  

INSTALLATION

The orblookup cgi needs to be located in a directory that is authorized to
run scripts by the web server.  This means that you will have to choose 
between:

1) Placing the orblookup program in the web server's default script directory
   ( such as $WEBROOT/cgi-bin )

2) Placing the entire orblookup install within the web tree and granting the
   orblookup directory or file script execution privileges

Solution 1 is a little more secure, since fewer files will be exposed to the
outside world.  Additionally, solution 1 requires moving the configuration
file to a globally-known parameter file location, such as $ANTELOPE/data/pf/.
Solution 2 is more straightforward, since all files are kept together,
but most likely requires the web server configuration to be changed.

USAGE

Once configured as below, the orblookupd program can be controlled using the
perl script orblook.  To start gathering information from an orb, run

    orblook start orbname interval

where orbname is the orbname as used in an orbstat command, and interval
is the time in minutes between updates.  To restart an orb, run

    orblook restart orbname interval

and to stop a currently running orb, run

    orblook stop orbname

FILES IN THIS PACKAGE

README                          This file
QuickStart.txt                  Read this if you just want to get running
orblook                         perl executable wrapper script
orblookup_example_config.pf     Fleshed-out example configuration file
ro.pl                           perl script called by orblook
orblookupd                      The orblookup daemon C binary
orblookup                       The orblookup cgi C binary

WHAT NEEDS TO BE PERSONALIZED

* orblookup.pf *
Orb information and html layout must be provided as a parameter file described
in the section "Configuration File Format" below.

* orblook *
The first line of the file should be changed to match the perl executable
on your system.  Additionally, the value $orblookupdir should be changed to
your orblookup install location.

CONFIGURATION FILE FORMAT

The configuration file for orblookup is an Antelope Real-Time System
parameter file.  An example configuration file named 
orblookup_example_config.pf illustrates a working configuration. 

Two items of importance exist in the orblookup configuration file: the orblist,
and the html template.

THE HTML TEMPLATE
The first item of importance in the orblookup configuration file is the list
of orbs to be monitored, containing the orb names, packet types to be
scanned, the alert messages to be used, the fields to be displayed, and fields
to be ignored for particular packet types.  Expect more documentation on this
to be forthcomming.

The second item of importance in the orblookup configuration file is the
html template.  The template element contains blocks of valid html code
with special comments designed to act as placeholders for variables.  At least
one block of code must be contained by html_template: the overview element.
This is the first block of code processed, and if no references to other
blocks are contained with it, may be the only block of code processed.

The orblookup program steps through the overview string literal and substitutes
generated code at special comments encountered.  There are three specific 
comment types used by orblookup, with the following format:

1) <!-- ?variable_name -->
   which is replaced by the value of the given variable based on code logic,
   where variable_name is a legal variable name listed below

2) <!-- ?insert block_name iterate=num indent=num_spaces -->
   which is replaced by a block of code contained in block_name and which is
   indented num_spaces, where block_name is a top-level component under
   html_template.  This performes num iterations of the block of code

3) <!-- ?insert block_name iterate=variable_name indent=num_spaces -->
   which is replaced by a block of code iterated over variable_name and
   indented num_spaces, where variable_name is a legal variable name listed
   below, and has an integer value.  This loops over the variable
   variable_name, and updates its value through each iteration.  The valid
   variable names for this purpose are:
      net
      sta
      used_field
      all_field
      alert_stage
      orb

ORBLOOKUP.PF 

The following is a list of legal variable names for use within the html 
template and what they represent:

orbname                 the name of the current orb
minnetlat               the smallest latency on the current network
mediannetlat            the median latency on the current network
maxnetlat               the largest latencies seen on the current network
alertmode               " checked" if displaying only alerts, "" otherwise
staclass                class corresponding for current station
netclass                class corresponding to current network
time                    the time in UTC of the last cache
encodednet              the network in scope in url-encoded form
encodednetsta           the sta+network in url-encoded form
alert_class             class corresponding to the current alert state
alert_desc              full description of the alert state
rownumclass             an alternating class name, either .oddrow or .evenrow
fieldclass              the class of the current field
fieldvalue              the value of the current field
fieldalign              the alignment of the current field, based on config
checkedstatus           replaced by "checked" or nothing depending on field
scriptname              the url of the current page
percentcolwidth         the reciprocal of the number of columns as a percent
net                     name of the network currently in scope
sta                     name of the station currently in scope
used_field              the name of the current field that is enabled 
all_field               the name of the current field
num_used_fields         # of fields current enabled
numfields               total # of fields defined for a network
num_nets                total # of networks used
numstas                 total # of stations on current network
numstastot              total # of stations on all networks
numstas_expected        total # of expected stations on current network
numchans                # of channels found for the current station
numchanstot             total # of channels on current network
url                     url for the current network
orburl                  url for the current orb
orb                     name of the current orb
